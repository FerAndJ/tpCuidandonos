@startuml Cuidandonos


Class Transeunte {
    -datos : Datos
    -direccionActual : Direccion
    -tipoUsuario 
    
}


Class Direccion {
    -calle : String
    -altura : Integer
}

Transeunte *-- Direccion

Class Cuidador {
    -datos : Datos
    -usuarioPasivo : Boolean
    -tipoUsuario 
    +aceptarCuidado(Transeunte transeunte, Direccion destino) : Boolean

}

Class Datos {
    -nombre : String
    -apellido : String
    -direccion : String
    -edad: Integer
    -Sexo : String
}

Transeunte *-- Datos
Cuidador *-- Datos


Class Usuario <<abstract>> {
    -notificaciones : Boolean
    -reaccionIncidente : Incidente

}

Class Incidente {
    motivosIncidentes : Incidentes
    minutosDeEspera : Integer
}

Usuario *-- Incidente


Incidente *-- Incidentes

Enum Incidentes {
    Mensaje
    LlamaPolicia
    LlamaUsuario
    FalsaAlarma
}


Class UsuarioPasivo {
    
}

Class UsuarioActivo {
     
     
     +habilitarNotificaciones()
     +deshabilitarNotificaciones()
     
     
}

Cuidador <-- Usuario

Transeunte <-- Usuario

Usuario <|-- UsuarioPasivo
Usuario <|-- UsuarioActivo



Class AdapterDistancias {
    calculoDistancia(Direccion d1, Direccion d2, Medida medida) : Distancia
}

UsuarioActivo <-- Viaje

AdapterDistancias <-- Viaje

Enum Medida {
    Metros
    Kilometros
    Duracion
}

AdapterDistancias *-- Medida


Class Viaje {
    -paradas : [Parada]
    +calcularTiempoDemora(Distancia distancia) : Integer
    +verificarEstadoViaje()
    +solicitudViaje(Direccion destino, Direccion direccionActual, Cuidador.. cuidador) : Cuidador..
    +calcularTiempo([Parada])
    +calcularTiempoEntreParadas(parada)
}

Class Parada {
  -avisarEstado : Boolean
  -direccion : Direccion
  -minutosEspera : Integer
  +tiempoRecorrido(Parada paradaAnterior)

}

Viaje <-- Parada

Parada <-- AdapterDistancias

@enduml
